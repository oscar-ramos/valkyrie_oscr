#!/usr/bin/env python
#
# Generate kinematic motion to control the position/orientation of some
# operational points of the NAO robot
#
# To use it:
#            roslaunch valkyrie_oscr display.launch
#            rosrun valkyrie_oscr motion_arms
#
#        Note: For interactive mode, instead of rosrun use
#            roscd valkyrie_oscr/scripts
#            ipython -i motion_arms
#
#
#


from optparse import OptionParser
import numpy as np
import time

import rospy
from oscr.ros_kine_sim import RosKineSim
from oscr.ros_logs import RosLogs
from oscr.utils import incPosition, incPoseLocal

from valkyrie_ros_robot import *


if __name__ == '__main__':

    # Parse the arguments
    parser = OptionParser()
    parser.add_option("--back", dest="back", default="pin",
                      help="back can be pin (default) or rbdl")
    parser.add_option("--solver", dest="solver", default="wqp",
                      help="solver can be hqp (default), ns (nullspace) or \
                      wqp (weighted qp")
    parser.add_option("--log", dest="log", default="false",
                      help="log can be back can be true, or false (default)")
    (options, args) = parser.parse_args()
    # Backend: 'pin' (default) or 'rbdl'
    backend = options.back
    # Solver
    solvertype = options.solver
    # Logs
    if (options.log=='true'): do_logs = True
    else: do_logs = False
        
    # Frequency
    f = 100.0
    # Robot simulation instance
    sim = ValkyrieRosKineSim('naoMotion', f, True, backend)

    # Joint configuration
    q = [-0.018706, 0.0, 1.143354, 0.999688, 0.0, -0.024968, 0.0,
         0.0, 0.0, -0.199764, 0.499411, -0.249705, 0.0,
         0.0, 0.0, -0.199764, 0.499411, -0.249705, 0.0,
         0.0,  0.049941, 0.0,
         -0.78, -1.1, 1.48, -0.62, 0.0, 0.0, 0.0,
         0., 0., 0.,
         -0.78, 1.1, 1.48, 0.62, 0.0, 0.0, 0.0 ]
    q = np.array([q]).T
    # Set the configuration to the robot
    sim.update(q)

    # Initialize solver: use 'HQP', 'NS' or 'WQP'
    if solvertype == 'hqp': sim.initKineSolver(q)  # default is HQP
    elif solvertype == 'ns': sim.initKineSolver(q, 'NS')
    elif solvertype == 'wqp': sim.initKineSolver(q, 'WQP')
    else: print 'Solver type not supported'
       
    # Tasks
    sim.initKineTaskPose('rightPalm','pose','RHand')
    sim.initKineTaskPose('leftPalm','pose','LHand')
    sim.initKineTaskPose('leftFoot','pose','LAnkle')
    sim.initKineTaskPose('rightFoot','pose','RAnkle')

    # Logs
    logs = RosLogs(sim.robot.pkg+'/data/', 'motion_arms_', f, do_logs)
    logs.addTask(sim.task['LHand'])
    logs.addTask(sim.task['RHand'])
    
    # Keep ankles without motion
    sim.task['LAnkle'].keep(10.0)
    sim.task['RAnkle'].keep(10.0)

    # Set desired pose for the right hand
    currentRHand = sim.task['RHand'].getSensedValue()
    desiredRHand = incPoseLocal(currentRHand,
                                (0.20, -0.25, 0.08),
                                (-20., (1., 0., 0.)))
    sim.task['RHand'].setDesiredValue(desiredRHand)

    # Set desired pose for the left hand
    currentLHand = sim.task['LHand'].getSensedValue()
    desiredLHand = incPoseLocal(currentLHand,
                                (-0.20, 0.25, 0.28),
                                (20., (1., 0., 0.)))
    sim.task['LHand'].setDesiredValue(desiredLHand)

    # Add task to the solver
    sim.pushTask(sim.task['LAnkle'])
    sim.pushTask(sim.task['RAnkle'])
    sim.pushTask(sim.task['RHand'])
    sim.pushTask(sim.task['LHand'])
    
    while not rospy.is_shutdown():
        logs.save(q)
        tic = time.time()
        qdes = sim.getPositionControl(q)
        toc = time.time()
        sim.update(qdes)
        q = qdes.copy()
        # Save the computation time
        logs.savetime(tic, toc, show=False)
        sim.rate.sleep()
    logs.close()
