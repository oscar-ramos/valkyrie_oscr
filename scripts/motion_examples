#!/usr/bin/env python
#
# Generate kinematic motion to control the position/orientation of some
# operational points of the Valkyrie robot
#
# To use it (choose from 1 to 4):
#     roslaunch valkyrie_oscr display.launch
#     rosrun valkyrie_oscr motion_examples --type 4
#
# Note: For interactive mode, instead of rosrun use
#     roscd valkyrie_oscr/scripts
#     ipython -i motion_examples
#


from optparse import OptionParser
import numpy as np
import time

import rospy
from oscr.ros_kine_sim import RosKineSim
from oscr.utils import incPosition, incPoseLocal

from valkyrie_ros_robot import *


if __name__ == '__main__':

    # Parse the arguments
    parser = OptionParser()
    parser.add_option("--back", dest="back", default="pin",
                      help="back can be pin (default) or rbdl")
    parser.add_option("--mtype", dest="mtype", default="1",
                      help="type of motion: 1, 2, 3 4")
    parser.add_option("--solver", dest="solver", default="hqp",
                      help="solver can be hqp (default), ns (nullspace) or \
                      wqp (weighted qp")
    (options, args) = parser.parse_args()
    # Backend: 'pin' (default) or 'rbdl'
    backend = options.back
    # Solver
    solvertype = options.solver
    # Motion type
    mtype = eval(options.mtype)
        
    # Frequency
    f = 100.0
    # Robot simulation instance ('pin' or 'rbdl')
    sim = ValkyrieRosKineSim('naoMotion', f, True, backend)

    # Joint configuration
    q = [-0.018706, 0.0, 1.143354, 0.999688, 0.0, -0.024968, 0.0,
         0.0, 0.0, -0.199764, 0.499411, -0.249705, 0.0,
         0.0, 0.0, -0.199764, 0.499411, -0.249705, 0.0,
         0.0,  0.049941, 0.0,
         -0.78, -1.1, 1.48, -0.62, 0.0, 0.0, 0.0,
         0., 0., 0.,
         -0.78, 1.1, 1.48, 0.62, 0.0, 0.0, 0.0 ]
    q = np.array([q]).T
    # Set the configuration to the robot
    sim.update(q)

    # Initialize solver: use 'HQP', 'NS' or 'WQP'
    if solvertype == 'hqp': sim.initKineSolver(q)  # default is HQP
    elif solvertype == 'ns': sim.initKineSolver(q, 'NS')
    elif solvertype == 'wqp': sim.initKineSolver(q, 'WQP')
    else: print 'Solver type not supported'

    # Tasks for the legs
    sim.initKineTaskPose('leftFoot','pose','LAnkle', show_markers=False)
    sim.initKineTaskPose('rightFoot','pose','RAnkle', show_markers=False)
    # Keep ankles without motion
    sim.task['LAnkle'].keep(10.0)
    sim.task['RAnkle'].keep(10.0)
    # Add task to the solver
    sim.pushTask(sim.task['LAnkle'])
    sim.pushTask(sim.task['RAnkle'])
    
    if (mtype==1):
        # Tasks
        sim.initKineTaskPose('neckYawLink','orientation','Head')
        sim.initKineTaskPose('rightPalm','position','RHand')
        sim.task['Head'].keep(1.0)
        # Set desired pose for the right hand
        currentRHand = sim.task['RHand'].getSensedValue()
        desiredRHand = incPosition(currentRHand, [-0.2, -0.25, -0.5])
        sim.task['RHand'].setDesiredValue(desiredRHand)
        # Add tasks to the solver
        sim.pushTask(sim.task['RHand'])
        sim.pushTask(sim.task['Head'])

    elif (mtype==2):
        # Tasks
        sim.initKineTaskPose('rightPalm','position','RHand')
        sim.initKineTaskPose('leftPalm','pose','LHand', show_markers=False)
        sim.task['LHand'].keep(1.0)
        # Set desired pose for the right hand
        currentRHand = sim.task['RHand'].getSensedValue()
        desiredRHand = incPosition(currentRHand, [-0.2, -0.25, -0.5])
        sim.task['RHand'].setDesiredValue(desiredRHand)
        # Add tasks for the solver
        sim.pushTask(sim.task['RHand'])
        sim.pushTask(sim.task['LHand'])

    elif (mtype==3):
        # Base task
        sim.initKineTaskPose('pelvis','pose','Base')
        # Set desired pose for the base
        currentBase = sim.task['Base'].getSensedValue()
        desiredBase = incPoseLocal(currentBase,
                                   (0.0, 0.20, -0.20),
                                   (0., (1., 0., 0.)))
        sim.task['Base'].setDesiredValue(desiredBase)
        # Add task to the solver
        sim.pushTask(sim.task['Base'])

    elif (mtype==4):
        # Base task
        sim.initKineTaskPose('pelvis','pose','Base')
        sim.initKineTaskPose('rightPalm','position','RHand')
        sim.initKineTaskPose('leftPalm','position','LHand')
        # Set desired pose for the base
        currentBase = sim.task['Base'].getSensedValue()
        desiredBase = incPoseLocal(currentBase,
                                   (0.0, 0.20, -0.25),
                                   (0., (1., 0., 0.)))
        sim.task['Base'].setDesiredValue(desiredBase)
        # Set desired pose for the right hand
        currentRHand = sim.task['RHand'].getSensedValue()
        desiredRHand = incPosition(currentRHand, [-0.20, -0.2, 0.45])
        sim.task['RHand'].setDesiredValue(desiredRHand)
        # Set desired pose for the left hand
        currentLHand = sim.task['LHand'].getSensedValue()
        desiredLHand = incPosition(currentLHand, [-0.20, 0.2, 0.45])
        sim.task['LHand'].setDesiredValue(desiredLHand)
        # Add task to the solver
        sim.pushTask(sim.task['Base'])
        sim.pushTask(sim.task['RHand'])
        sim.pushTask(sim.task['LHand'])

        
    while not rospy.is_shutdown():
    # for i in range(500):
        qdes = sim.getPositionControl(q)
        sim.update(qdes)
        #sim.update(q)
        q = qdes.copy()
        sim.rate.sleep()
